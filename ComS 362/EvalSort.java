package edu.iastate.cs362.imperative;import java.io.File;import java.io.FileNotFoundException;import java.util.Random;import java.util.Scanner;public class EvalSorts {	public static void main(String[] args) throws FileNotFoundException {		long seed; 		int length; 		long startTime;		long endTime;				do {			// input data source 			prompt("Data source? (0 = file, 1 = generated)");			if (getInput() == 0L){							//get data from file				String filename;				int[] fileMaster ;				int[] fileData ;				//process data from file				//input file name				prompt("File name? ");				String fname = getFileName();				fileMaster = readFile(fname);								// perform insertion sort				fileData = makeCopy(fileMaster);				startTime = getTime();				insertionSort(fileData);				endTime = getTime();				System.out.format("%20.20s %10d %10d %n", "insertion Sort", fileData.length, endTime-startTime);								// perform selection sort				fileData = makeCopy(fileMaster);				startTime = getTime();				selectionSort(fileData);				endTime = getTime();				System.out.format("%20.20s %10d %10d %n", "selection Sort", fileData.length, endTime-startTime);				// perform merge sort				fileData = makeCopy(fileMaster);				startTime = getTime();				mergeSort(fileData);				endTime = getTime();				System.out.format("%20.20s %10d %10d %n", "merge Sort", fileData.length, endTime-startTime);				// perform quick sort				fileData = makeCopy(fileMaster);				startTime = getTime();				qSort(fileData);				endTime = getTime();				System.out.format("%20.20s %10d %10d %n", "quick Sort", fileData.length, endTime-startTime);							} else {				int[] randomData;				int[] ranCopy;								// get experiment parameters				prompt("How many values?");				length = getInput();				prompt("What seed? 0 = default ");				seed = getInput();				// generate random data				randomData = new int[length];				setRandomSeed(seed);				for (int i = 0; i < length; i++){					randomData[i] = nextRandomInt();				}												// perform insertion sort				ranCopy = makeCopy(randomData);				startTime = getTime();				insertionSort(ranCopy);				endTime = getTime();				System.out.format("%20.20s %10d %10d %n", "insertion Sort", ranCopy.length, endTime-startTime);								// perform selection sort				ranCopy = makeCopy(randomData);				startTime = getTime();				selectionSort(ranCopy);				endTime = getTime();				System.out.format("%20.20s %10d %10d %n", "selection Sort", ranCopy.length, endTime-startTime);				// perform merge sort				ranCopy = makeCopy(randomData);				startTime = getTime();				mergeSort(ranCopy);				endTime = getTime();				System.out.format("%20.20s %10d %10d %n", "merge Sort", ranCopy.length, endTime-startTime);				// perform quick sort				ranCopy = makeCopy(randomData);				startTime = getTime();				qSort(ranCopy);				endTime = getTime();				System.out.format("%20.20s %10d %10d %n", "quick Sort", ranCopy.length, endTime-startTime);			}							prompt("Another experiment? (0 = no, 1 = yes) ");		} while (getInput() == 1L);	}	private static Scanner scan = new Scanner(System.in);	public static int getInput(){		return scan.nextInt();	}		public static String getFileName(){		return scan.next();	}		public static void prompt(String query){		System.out.println(query);	}		public static int[] readFile( String fname) throws FileNotFoundException{		Scanner fscan = new Scanner(new File(fname));		int numEntries = fscan.nextInt();		int[] data = new int[numEntries];		for (int i = 0; i < numEntries; i++){			data[i] = fscan.nextInt();		}		fscan.close();		return data;	}		public static int[] makeCopy(int[] source){		int[] retData = new int[source.length];		for (int i = 0; i < source.length; i++){			retData[i] = source[i];		}		return retData;	}		public static int[] insertionSort(int[] data){		randomDelay();		return data; 	}	public static int[] qSort(int[] data){		randomDelay();		return data; 	}	public static int[] mergeSort(int[] data){		randomDelay();		return data; 	}	public static int[] selectionSort(int[] data){		randomDelay();		return data; 	}	public static Random generator ;	private static void setRandomSeed(long seed) {		generator = new Random(seed);			}	private static int nextRandomInt() {		return generator.nextInt();	}	private static long getTime() {		return System.currentTimeMillis();	}	public static void randomDelay(){		try {			Thread.sleep(generator.nextInt(30));		} catch (InterruptedException e) {			// TODO Auto-generated catch block			e.printStackTrace();		}	}}